{
  "files": [
    {
      "path": "errorLogger.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nconst logFilePath = path.join(process.cwd(), 'error.json');\n\nconst errorLogger = {\n  log: (error) => {\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString(),\n    };\n\n    fs.appendFile(logFilePath, JSON.stringify(errorData) + '\\n', (err) => {\n      if (err) {\n        console.error('Error writing to log file:', err);\n      }\n    });\n  },\n};\n\nprocess.on('uncaughtException', (error) => {\n  errorLogger.log(error);\n});\n\nprocess.on('unhandledRejection', (reason) => {\n  errorLogger.log(reason);\n});\n\nexport default errorLogger;"
    },
    {
      "path": "generateFileList.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nconst srcDir = './';\nconst ignoredDirs = ['.git', 'node_modules'];\nconst ignoredExtensions = ['.svg', '.png', '.md'];\nconst ignoredFiles = [\n  'package-lock.json',\n  '.DS_Store',\n  'fileList.json',\n  'vite.config.ts',\n  'tsconfig.node.json',\n  'tsconfig.json',\n  'vite-env.d.ts',\n  '.gitignore'\n];\n\nfunction listFiles(dir, fileList = [], ignoredList = []) {\n  const files = fs.readdirSync(dir);\n\n  for (const file of files) {\n    const filePath = path.join(dir, file);\n    const stats = fs.statSync(filePath);\n    const ext = path.extname(filePath).toLowerCase();\n\n    // Skip ignored directories and add them to ignoredList\n    if (ignoredDirs.includes(file) || stats.isDirectory() && ignoredDirs.some(d => file.includes(d))) {\n      ignoredList.push({ path: path.relative(process.cwd(), filePath), type: 'directory' });\n      continue;\n    }\n\n    // Skip ignored files and add them to ignoredList\n    if (ignoredFiles.includes(file) || ignoredExtensions.includes(ext)) {\n      ignoredList.push({ path: path.relative(process.cwd(), filePath), type: 'file' });\n      continue;\n    }\n\n    if (stats.isDirectory()) {\n      const result = listFiles(filePath, fileList, ignoredList);\n      fileList = result.fileList;\n      ignoredList = result.ignoredList;\n    } else {\n      const relativePath = path.relative(process.cwd(), filePath);\n      const fileContent = fs.readFileSync(filePath, 'utf-8');\n      fileList.push({ path: relativePath, content: fileContent });\n    }\n  }\n\n  return { fileList, ignoredList };\n}\n\nconst { fileList, ignoredList } = listFiles(srcDir);\nconst jsonOutput = {\n  files: fileList,\n  ignored: ignoredList\n};\nconst jsonFileList = JSON.stringify(jsonOutput, null, 2);\n\nfs.writeFileSync('src/fileList.json', jsonFileList);"
    },
    {
      "path": "index.html",
      "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"archdev\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"node errorLogger.js && vite\",\n    \"generate-file-list\": \"node generateFileList.js\",\n    \"build\": \"tsc && vite build\",\n    \"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@emotion/styled\": \"^11.11.5\",\n    \"@mui/icons-material\": \"^5.15.15\",\n    \"@mui/lab\": \"^5.0.0-alpha.170\",\n    \"@mui/x-charts\": \"^7.3.1\",\n    \"@mui/x-tree-view\": \"^7.3.1\",\n    \"axios\": \"^1.6.8\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-tree-view\": \"^0.1.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.66\",\n    \"@types/react-dom\": \"^18.2.22\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.2.0\",\n    \"@typescript-eslint/parser\": \"^7.2.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.6\",\n    \"typescript\": \"^5.2.2\",\n    \"vite\": \"^5.2.0\"\n  }\n}\n"
    },
    {
      "path": "src/App.css",
      "content": "#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n"
    },
    {
      "path": "src/App.tsx",
      "content": "import { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\nimport GithubRepoExplorer from './components/GithubRepoExplorer'\nimport Dashboard from './components/Dashboard'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <Dashboard  />\n  )\n}\n\nexport default App\n"
    },
    {
      "path": "src/components/Chart.tsx",
      "content": "import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { LineChart, axisClasses } from '@mui/x-charts';\nimport { ChartsTextStyle } from '@mui/x-charts/ChartsText';\nimport Title from './Title';\nimport GithubRepoExplorer from './GithubRepoExplorer';\n\n// Generate Sales Data\nfunction createData(\n  time: string,\n  amount?: number,\n): { time: string; amount: number | null } {\n  return { time, amount: amount ?? null };\n}\n\nconst data = [\n  createData('00:00', 0),\n  createData('03:00', 300),\n  createData('06:00', 600),\n  createData('09:00', 800),\n  createData('12:00', 1500),\n  createData('15:00', 2000),\n  createData('18:00', 2400),\n  createData('21:00', 2400),\n  createData('24:00'),\n];\n\nexport default function Chart() {\n  const theme = useTheme();\n\n  return (\n    <React.Fragment>\n      <Title>Today</Title>\n      <div style={{ width: '100%', flexGrow: 1, overflow: 'hidden' }}>\n        <LineChart\n          dataset={data}\n          margin={{\n            top: 16,\n            right: 20,\n            left: 70,\n            bottom: 30,\n          }}\n          xAxis={[\n            {\n              scaleType: 'point',\n              dataKey: 'time',\n              tickNumber: 2,\n              tickLabelStyle: theme.typography.body2 as ChartsTextStyle,\n            },\n          ]}\n          yAxis={[\n            {\n              label: 'Sales ($)',\n              labelStyle: {\n                ...(theme.typography.body1 as ChartsTextStyle),\n                fill: theme.palette.text.primary,\n              },\n              tickLabelStyle: theme.typography.body2 as ChartsTextStyle,\n              max: 2500,\n              tickNumber: 3,\n            },\n          ]}\n          series={[\n            {\n              dataKey: 'amount',\n              showMark: false,\n              color: theme.palette.primary.light,\n            },\n          ]}\n          sx={{\n            [`.${axisClasses.root} line`]: { stroke: theme.palette.text.secondary },\n            [`.${axisClasses.root} text`]: { fill: theme.palette.text.secondary },\n            [`& .${axisClasses.left} .${axisClasses.label}`]: {\n              transform: 'translateX(-25px)',\n            },\n          }}\n        />\n      </div>\n    </React.Fragment>\n  );\n}"
    },
    {
      "path": "src/components/Dashboard.tsx",
      "content": "import * as React from 'react';\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiDrawer from '@mui/material/Drawer';\nimport Box from '@mui/material/Box';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport Badge from '@mui/material/Badge';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Link from '@mui/material/Link';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport { mainListItems, secondaryListItems } from './ListItems';\nimport Chart from './Chart';\nimport Deposits from './Deposits';\nimport Orders from './Orders';\nimport GithubRepoExplorer from './GithubRepoExplorer';\n\nfunction Copyright(props: any) {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      {/* {'Copyright Â© '} */}\n      <Link color=\"inherit\" href=\"https://heyitslogan.com/\">\n        Logan Meyer\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth: number = 240;\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n  ({ theme, open }) => ({\n    '& .MuiDrawer-paper': {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      boxSizing: 'border-box',\n      ...(!open && {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n          width: theme.spacing(9),\n        },\n      }),\n    },\n  }),\n);\n\n// TODO remove, this demo shouldn't need to reset the theme.\nconst defaultTheme = createTheme();\n\nexport default function Dashboard() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline />\n        <AppBar position=\"absolute\" open={open}>\n          <Toolbar\n            sx={{\n              pr: '24px', // keep right padding when drawer closed\n            }}\n          >\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={toggleDrawer}\n              sx={{\n                marginRight: '36px',\n                ...(open && { display: 'none' }),\n              }}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              sx={{ flexGrow: 1 }}\n            >\n              Dashboard\n            </Typography>\n            <IconButton color=\"inherit\">\n              <Badge badgeContent={4} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Drawer variant=\"permanent\" open={open}>\n          <Toolbar\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'flex-end',\n              px: [1],\n            }}\n          >\n            <IconButton onClick={toggleDrawer}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </Toolbar>\n          <Divider />\n          <List component=\"nav\">\n            {mainListItems}\n            <Divider sx={{ my: 1 }} />\n            {secondaryListItems}\n          </List>\n        </Drawer>\n        <Box\n          component=\"main\"\n          sx={{\n            backgroundColor: (theme) =>\n              theme.palette.mode === 'light'\n                ? theme.palette.grey[100]\n                : theme.palette.grey[900],\n            flexGrow: 1,\n            height: '100vh',\n            overflow: 'auto',\n          }}\n        >\n          <Toolbar />\n          <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\n                  <GithubRepoExplorer />\n                </Paper>\n              </Grid>\n              {/* Chart */}\n              <Grid item xs={12} md={8} lg={9}>\n                <Paper\n                  sx={{\n                    p: 2,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: 240,\n                  }}\n                >\n                  <Chart />\n                </Paper>\n              </Grid>\n              {/* Recent Deposits */}\n              <Grid item xs={12} md={4} lg={3}>\n                <Paper\n                  sx={{\n                    p: 2,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: 240,\n                  }}\n                >\n                  <Deposits />\n                </Paper>\n              </Grid>\n              {/* Recent Orders */}\n              <Grid item xs={12}>\n                <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\n                  <Orders />\n                </Paper>\n              </Grid>\n            </Grid>\n            <Copyright sx={{ pt: 4 }} />\n          </Container>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n}"
    },
    {
      "path": "src/components/Deposits.tsx",
      "content": "import * as React from 'react';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Title from './Title';\n\nfunction preventDefault(event: React.MouseEvent) {\n  event.preventDefault();\n}\n\nexport default function Deposits() {\n  return (\n    <React.Fragment>\n      <Title>Recent Deposits</Title>\n      <Typography component=\"p\" variant=\"h4\">\n        $3,024.00\n      </Typography>\n      <Typography color=\"text.secondary\" sx={{ flex: 1 }}>\n        on 15 March, 2019\n      </Typography>\n      <div>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          View balance\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}"
    },
    {
      "path": "src/components/GithubRepoExplorer.tsx",
      "content": "import React, { useState } from 'react';\nimport axios from 'axios';\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\nimport { TreeItem } from '@mui/x-tree-view/TreeItem';\nimport Checkbox from '@mui/material/Checkbox';\n\ninterface GithubFile {\n  id: string;\n  label: string;\n  name: string;\n  path: string;\n  type: 'file' | 'dir';\n  children?: GithubFile[];\n}\n\nconst GithubRepoExplorer = () => {\n  const [repoUrl, setRepoUrl] = useState('');\n  const [repoData, setRepoData] = useState<GithubFile[] | null>(null);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [accessToken, setAccessToken] = useState('');\n\n  const fetchRepoData = async (url: string) => {\n    try {\n      // First, try an unauthenticated request\n      let response = await axios.get<GithubFile[]>(\n        `https://api.github.com/repos/${url.replace('https://github.com/', '')}/contents`\n      );\n\n      const repoDataWithId = response.data.map((file) => ({\n        ...file,\n        id: file.path,\n        label: file.name,\n      }));\n      setRepoData(repoDataWithId);\n    } catch (error) {\n      // If the unauthenticated request fails with a 403 Forbidden error\n      if (error.response && error.response.status === 403) {\n        try {\n          // Retry with the access token\n          const response = await axios.get<GithubFile[]>(\n            `https://api.github.com/repos/${url.replace('https://github.com/', '')}/contents`,\n            {\n              headers: {\n                Authorization: `Bearer ${accessToken}`,\n              },\n            }\n          );\n\n          const repoDataWithId = response.data.map((file) => ({\n            ...file,\n            id: file.path,\n            label: file.name,\n          }));\n          setRepoData(repoDataWithId);\n        } catch (error) {\n          console.error('Error fetching repository data with access token:', error);\n        }\n      } else {\n        console.error('Error fetching repository data:', error);\n      }\n    }\n  };\n\n  const handleUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRepoUrl(event.target.value);\n  };\n\n  const handleAccessTokenChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAccessToken(event.target.value);\n  };\n\n  const handleSelectedItemsChange = (newSelectedItems: string[]) => {\n    setSelectedItems(newSelectedItems);\n  };\n\n  const getSubdirectories = (data: GithubFile[], parentPath: string): string[] => {\n    let subdirectories: string[] = [];\n    for (const item of data) {\n      if (item.type === 'dir' && item.path.startsWith(parentPath + '/')) {\n        subdirectories.push(item.path);\n        subdirectories = [...subdirectories, ...getSubdirectories(data, item.path)];\n      }\n    }\n    return subdirectories;\n  };\n\n  const renderTreeItem = (node: GithubFile) => (\n    <TreeItem\n      key={node.id} // Add the key prop here\n      itemId={node.id}\n      label={\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <Checkbox\n            checked={selectedItems.includes(node.id)}\n            onChange={(event) => {\n              const isChecked = event.target.checked;\n              const updatedItems = isChecked\n                ? [...selectedItems, node.id, ...getSubdirectories(repoData || [], node.id)]\n                : selectedItems.filter((id) => id !== node.id);\n              handleSelectedItemsChange(updatedItems);\n            }}\n          />\n          {node.label}\n        </div>\n      }\n    >\n      {Array.isArray(node.children)\n        ? node.children.map((childNode) => (\n            <TreeItem\n              key={childNode.id} // Add the key prop here for child components\n              itemId={childNode.id}\n              label={\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                  <Checkbox\n                    checked={selectedItems.includes(childNode.id)}\n                    onChange={(event) => {\n                      const isChecked = event.target.checked;\n                      const updatedItems = isChecked\n                        ? [...selectedItems, childNode.id, ...getSubdirectories(repoData || [], childNode.id)]\n                        : selectedItems.filter((id) => id !== childNode.id);\n                      handleSelectedItemsChange(updatedItems);\n                    }}\n                  />\n                  {childNode.label}\n                </div>\n              }\n            >\n              {Array.isArray(childNode.children)\n                ? childNode.children.map((grandChildNode) => renderTreeItem(grandChildNode))\n                : null}\n            </TreeItem>\n          ))\n        : null}\n    </TreeItem>\n  );\n\n  return (\n    <div>\n      <input type=\"text\" value={repoUrl} onChange={handleUrlChange} placeholder=\"Enter GitHub repository URL\" />\n      <input type=\"text\" value={accessToken} onChange={handleAccessTokenChange} placeholder=\"Enter GitHub access token\" />\n      <button onClick={() => fetchRepoData(repoUrl)}>Fetch Repository</button>\n      {repoData && (\n        <SimpleTreeView\n          selectedItems={selectedItems}\n          onSelectedItemsChange={handleSelectedItemsChange}\n          multiSelect\n        >\n          {repoData.map((node) => renderTreeItem(node))}\n        </SimpleTreeView>\n      )}\n      {selectedItems.length > 0 && (\n        <div>\n          <h3>Selected Items:</h3>\n          <pre>{JSON.stringify(selectedItems, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GithubRepoExplorer;"
    },
    {
      "path": "src/components/ListItems.tsx",
      "content": "import * as React from 'react';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport PeopleIcon from '@mui/icons-material/People';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport LayersIcon from '@mui/icons-material/Layers';\nimport AssignmentIcon from '@mui/icons-material/Assignment';\n\nexport const mainListItems = (\n  <React.Fragment>\n    <ListItemButton>\n      <ListItemIcon>\n        <DashboardIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Dashboard\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <ShoppingCartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Orders\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <PeopleIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Customers\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <BarChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Reports\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <LayersIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Integrations\" />\n    </ListItemButton>\n  </React.Fragment>\n);\n\nexport const secondaryListItems = (\n  <React.Fragment>\n    <ListSubheader component=\"div\" inset>\n      Saved reports\n    </ListSubheader>\n    <ListItemButton>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Current month\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Last quarter\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <AssignmentIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Year-end sale\" />\n    </ListItemButton>\n  </React.Fragment>\n);"
    },
    {
      "path": "src/components/Orders.tsx",
      "content": "import * as React from 'react';\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Title from './Title';\n\n// Generate Order Data\nfunction createData(\n  id: number,\n  date: string,\n  name: string,\n  shipTo: string,\n  paymentMethod: string,\n  amount: number,\n) {\n  return { id, date, name, shipTo, paymentMethod, amount };\n}\n\nconst rows = [\n  createData(\n    0,\n    '16 Mar, 2019',\n    'Elvis Presley',\n    'Tupelo, MS',\n    'VISA â â¢â¢â¢â¢ 3719',\n    312.44,\n  ),\n  createData(\n    1,\n    '16 Mar, 2019',\n    'Paul McCartney',\n    'London, UK',\n    'VISA â â¢â¢â¢â¢ 2574',\n    866.99,\n  ),\n  createData(2, '16 Mar, 2019', 'Tom Scholz', 'Boston, MA', 'MC â â¢â¢â¢â¢ 1253', 100.81),\n  createData(\n    3,\n    '16 Mar, 2019',\n    'Michael Jackson',\n    'Gary, IN',\n    'AMEX â â¢â¢â¢â¢ 2000',\n    654.39,\n  ),\n  createData(\n    4,\n    '15 Mar, 2019',\n    'Bruce Springsteen',\n    'Long Branch, NJ',\n    'VISA â â¢â¢â¢â¢ 5919',\n    212.79,\n  ),\n];\n\nfunction preventDefault(event: React.MouseEvent) {\n  event.preventDefault();\n}\n\nexport default function Orders() {\n  return (\n    <React.Fragment>\n      <Title>Recent Orders</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Date</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Ship To</TableCell>\n            <TableCell>Payment Method</TableCell>\n            <TableCell align=\"right\">Sale Amount</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell>{row.date}</TableCell>\n              <TableCell>{row.name}</TableCell>\n              <TableCell>{row.shipTo}</TableCell>\n              <TableCell>{row.paymentMethod}</TableCell>\n              <TableCell align=\"right\">{`$${row.amount}`}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <Link color=\"primary\" href=\"#\" onClick={preventDefault} sx={{ mt: 3 }}>\n        See more orders\n      </Link>\n    </React.Fragment>\n  );\n}"
    },
    {
      "path": "src/components/Title.tsx",
      "content": "import * as React from 'react';\nimport Typography from '@mui/material/Typography';\n\ninterface TitleProps {\n  children?: React.ReactNode;\n}\n\nexport default function Title(props: TitleProps) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}"
    },
    {
      "path": "src/index.css",
      "content": ":root {\n  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 0.6em 1.2em;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #1a1a1a;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\nbutton:hover {\n  border-color: #646cff;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n"
    },
    {
      "path": "src/main.tsx",
      "content": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n"
    }
  ],
  "ignored": [
    {
      "path": ".DS_Store",
      "type": "file"
    },
    {
      "path": ".git",
      "type": "directory"
    },
    {
      "path": ".gitignore",
      "type": "file"
    },
    {
      "path": "README.md",
      "type": "file"
    },
    {
      "path": "node_modules",
      "type": "directory"
    },
    {
      "path": "package-lock.json",
      "type": "file"
    },
    {
      "path": "public/vite.svg",
      "type": "file"
    },
    {
      "path": "src/assets/react.svg",
      "type": "file"
    },
    {
      "path": "src/fileList.json",
      "type": "file"
    },
    {
      "path": "src/vite-env.d.ts",
      "type": "file"
    },
    {
      "path": "tsconfig.json",
      "type": "file"
    },
    {
      "path": "tsconfig.node.json",
      "type": "file"
    },
    {
      "path": "vite.config.ts",
      "type": "file"
    }
  ]
}